
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_labelled_decompositions.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_labelled_decompositions.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_labelled_decompositions.py:


Labelled decompositions
-----------------------

TLViz uses labelled decompositions, implemented by storing the factor matrices as Pandas DataFrames.
This makes it easy to make rich visualisations with the different decompositions. However, sometimes, we
just want to plot the result directly from TensorLy. Luckily, this is also possible, even when we are using
non-numpy backends.

.. GENERATED FROM PYTHON SOURCE LINES 12-19

Imports and setup
^^^^^^^^^^^^^^^^^

We will set the backend to pytorch to demonstrate that TLViz also works with non-numpy backends.
Note that support for non-numpy backends are experiental, so if you encounter any bugs while using
non-numpy backends, please let us know by using submitting a new
`issue <https://github.com/MarieRoald/tlviz/issues/new/choose>`_.

.. GENERATED FROM PYTHON SOURCE LINES 19-27

.. code-block:: default


    import tlviz
    import matplotlib.pyplot as plt
    import tensorly as tl
    from tensorly.decomposition import parafac

    tl.set_backend("pytorch")








.. GENERATED FROM PYTHON SOURCE LINES 28-31

Loading the data
^^^^^^^^^^^^^^^^
Here we load the `Aminoacids dataset <http://models.life.ku.dk/Amino_Acid_fluo>`_ from :cite:p:`bro1997parafac`.

.. GENERATED FROM PYTHON SOURCE LINES 31-34

.. code-block:: default

    aminoacids = tlviz.data.load_aminoacids()






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Loading Aminoacids dataset from:
    Bro, R, PARAFAC: Tutorial and applications, Chemometrics and Intelligent Laboratory Systems, 1997, 38, 149-171




.. GENERATED FROM PYTHON SOURCE LINES 35-41

Fitting a PARAFAC model
^^^^^^^^^^^^^^^^^^^^^^^

First, we fit a PARAFAC model. Normally, you should fit models using several random initialisations,
but since our goal here is not data analysis, but demonstrating how TLViz visualises
decompositions with and without labels, we fit only one model.

.. GENERATED FROM PYTHON SOURCE LINES 41-45

.. code-block:: default


    X = tl.tensor(aminoacids.data)
    cp_tensor = parafac(X, 3, init="random", random_state=0)








.. GENERATED FROM PYTHON SOURCE LINES 46-50

Plotting the components
^^^^^^^^^^^^^^^^^^^^^^^

Next, we plot the components without postprocessing the decomposition.

.. GENERATED FROM PYTHON SOURCE LINES 50-54

.. code-block:: default


    fig, ax = tlviz.visualisation.components_plot(cp_tensor)
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_labelled_decompositions_001.png
   :alt: plot labelled decompositions
   :srcset: /auto_examples/images/sphx_glr_plot_labelled_decompositions_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 55-57

We see that the component plots have used the component vector indices for the values along the
x-axis and that the x-labels get the default values, "Mode 0", "Mode 1", and "Mode 2".

.. GENERATED FROM PYTHON SOURCE LINES 59-63

Plotting the components
^^^^^^^^^^^^^^^^^^^^^^^

And finally, we plot the postprocessed decomposition instead.

.. GENERATED FROM PYTHON SOURCE LINES 63-68

.. code-block:: default


    cp_tensor_postprocessed = tlviz.postprocessing.postprocess(cp_tensor, aminoacids)
    fig, ax = tlviz.visualisation.components_plot(cp_tensor_postprocessed)
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_labelled_decompositions_002.png
   :alt: plot labelled decompositions
   :srcset: /auto_examples/images/sphx_glr_plot_labelled_decompositions_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-75

We see that by postprocessing the decomposition before plotting the components, we get a more informative plot.
The postprocessed decomposition has labels for the modes, which :meth:`tlviz.visualisation.components_plot`
uses for each plot's values along the x-axis and to give each subplot a descriptive x-label. Postprocessing
has also flipped the negative factor matrices (See
:meth:`tlviz.postprocessing.resolve_cp_sign_indeterminacy` for more information on how TLViz
decides the sign of the component vectors).

.. GENERATED FROM PYTHON SOURCE LINES 77-78

Finally, we reset the backend to NumPy, because the other gallery examples assume that we use the NumPy backend.

.. GENERATED FROM PYTHON SOURCE LINES 78-79

.. code-block:: default

    tl.set_backend("numpy")








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.803 seconds)


.. _sphx_glr_download_auto_examples_plot_labelled_decompositions.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_labelled_decompositions.py <plot_labelled_decompositions.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_labelled_decompositions.ipynb <plot_labelled_decompositions.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
